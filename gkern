#!/bin/bash

/bin/rm tmp/*
echo -e "\E[35mDebut de la compilation du kernel\n"
# generation du boot
cc -m32 -traditional -E -Iinclude boot/bootsect.S > tmp/bootsect.s 
as86 -0 -a -o tmp/bootsect.o tmp/bootsect.s
ld86 -0 -s -o tmp/bootsect tmp/bootsect.o
cc -m32 -traditional -E -Iinclude boot/setup.S > tmp/setup.s
as86 -0 -a -o tmp/setup.o tmp/setup.s
ld86 -0 -s -o tmp/setup tmp/setup.o

# generation du mini_kernel de base 
gcc -m32 minikernel_init/gidt.c -o tmp/gidt ; tmp/gidt > minikernel_init/idt.h
gcc -m32 -fno-stack-protector -traditional -Iinclude -c minikernel_init/head.S -o tmp/head.o
gcc -m32 -fno-stack-protector -Iinclude -c minikernel_init/util.c -o tmp/util.o
gcc -m32 -fno-stack-protector -Iinclude -c minikernel_init/vga.c -o tmp/vga.o
gcc -m32 -fno-stack-protector -Iinclude -c minikernel_init/main.c -o tmp/main.o
gcc -m32 -fno-stack-protector -Iinclude -c minikernel_init/process.c -o tmp/process.o
gcc -m32 -fno-stack-protector -Iinclude -c minikernel_init/syscalls.c -o tmp/syscalls.o
gcc -m32 -fno-stack-protector -Iinclude -c minikernel_init/keyboard.c -o tmp/keyboard.o
gcc -m32 -fno-stack-protector -Iinclude -c minikernel_init/ttyS_asm.S -o tmp/ttyS_asm.o
gcc -m32 -fno-stack-protector -Iinclude -c minikernel_init/ttyS.c -o tmp/ttyS.o


# generation du mini_kernel  user 
gcc -m32 -fno-stack-protector -Iinclude -c minikernel_user/test.S -o tmp/user_test.o
gcc -m32 -fno-stack-protector -Iinclude -c minikernel_user/entry.c -o tmp/entry.o
gcc -m32 -fno-stack-protector -Iinclude -c minikernel_user/ttyS_util.S -o tmp/ttyS_util.o

# generation du kernel
ld -m elf_i386 -Ttext 0x1000 -e startup_32 -o tmp/minikernel.elf  tmp/head.o  tmp/util.o  tmp/vga.o  tmp/main.o  tmp/ttyS_asm.o  tmp/ttyS.o  tmp/user_test.o tmp/entry.o  tmp/ttyS_util.o tmp/keyboard.o tmp/process.o tmp/syscalls.o user_tmp/libc.o
objcopy -O binary -R .note -R .comment -S tmp/minikernel.elf tmp/minikernel.bin

# extension du kernel pour faire 32 ko, comme ça on sait où sera la table
dd if=tmp/minikernel.bin of=tmp/minikernel.extended count=1 bs=40960 conv=sync

echo -e "\E[32m\n\nDebut de la compilation de la libc\n"
# generation de la libc
gcc -m32 -fno-stack-protector -Iinclude -Iuser_includes -c minikernel_user/libc.c -o user_tmp/libc.o

# pas sûr qu'on en ai besoin après tout
# gcc -m32 -fno-stack-protector -Iuser_includes -c minikernel_user/libc.S -o user_tmp/libcS.o

### template :
### gcc -m32 -fno-stack-protector -Iuser_includes -c 'name'.c -o user_tmp/'name'.o
### ld user_tmp/'name'.o user_temp/libc.o user_tmp/libcS.o -m elf_i386 -Ttext 0 -Tdata 0x2000 -e main -o user_tmp/'name'.elf
### objcopy -O binary -R .note -R .comment -S user_tmp/'name'.elf user_tmp/'name'.bin
### dd if=tmp/'name'.bin of=tmp/'name'.extended count=1 bs=16384 conv=sync

echo -e "\E[36m\n\n******************************************"
echo -e "Debut de la compilation des processus user.\n\t Ca va faire mal\n\n"

entry1=00000000
entry2=00000000
entry3=00000000
entry4=00000000
exists1=00000000
exists2=00000000
exists3=00000000
exists4=00000000


if [ -z $1 ]
then
	echo "Un kernel qui ne lance aucun processus ? Ca semble utile"
else
	if [ `echo $1 | cut -f2 -d '.'` == "c" ]
	then
		name1=$(basename $1 .c)
		gcc -m32 -fno-stack-protector -Iuser_includes -c $1 -o user_tmp/$name1.o
	else
		if [ `echo $1 | cut -f2 -d '.'` == "o" ]
		then
			name1=$(basename $1 .o)
		else
			echo "Nom du premier processus invalide. Arret de gkern"
			exit
		fi
	fi
	ld user_tmp/{$name1.o,libc.o} -m elf_i386 -Ttext 0 -Tdata 0x2000 -e main -o user_tmp/$name1.elf
	entry1=$(objdump -d user_tmp/$name1.elf | grep main | cut -f1 -d ' ')
	exists1=11111111
	objcopy -O binary -R .note -R .comment -S user_tmp/$name1.elf user_tmp/$name1.bin
	dd if=user_tmp/$name1.bin of=user_tmp/$name1.extended count=1 bs=16384 conv=sync
fi

if [ $2 ] #si $2 existe
then
	if [ `echo $2 | cut -f2 -d '.'` == "c" ]
	then
		name2=$(basename $2 .c)
		gcc -m32 -fno-stack-protector -Iuser_includes -c $2 -o user_tmp/$name2.o
	else
		if [ `echo $2 | cut -f2 -d '.'` == "o" ]
		then
			name2=$(basename $2 .o)
		else
			echo "Nom du deuxième processus invalide. Arret de gkern"
			exit
		fi
	fi
	ld user_tmp/{$name2.o,libc.o} -m elf_i386 -Ttext 0 -Tdata 0x2000 -e main -o user_tmp/$name2.elf
	entry2=$(objdump -d user_tmp/$name2.elf | grep main | cut -f1 -d ' ')
	exists2=11111111
	objcopy -O binary -R .note -R .comment -S user_tmp/$name2.elf user_tmp/$name2.bin
	dd if=user_tmp/$name2.bin of=user_tmp/$name2.extended count=1 bs=16384 conv=sync
fi

if [ $3 ] #si $3 existe
then
	if [ `echo $3 | cut -f2 -d '.'` == "c" ]
	then
		name3=$(basename $3 .c)
		gcc -m32 -fno-stack-protector -Iuser_includes -c $3 -o user_tmp/$name3.o
	else
		if [ `echo $3 | cut -f2 -d '.'` == "o" ]
		then
			name3=$(basename $3 .o)
		else
			echo "Nom du troisieme processus invalide. Arret de gkern"
			exit
		fi
	fi 
	ld user_tmp/{$name3.o,libc.o} -m elf_i386 -Ttext 0 -Tdata 0x2000 -e main -o user_tmp/$name3.elf
	entry3=$(objdump -d user_tmp/$name3.elf | grep main | cut -f1 -d ' ')
	exists3=11111111
	objcopy -O binary -R .note -R .comment -S user_tmp/$name3.elf user_tmp/$name3.bin
	dd if=user_tmp/$name3.bin of=user_tmp/$name3.extended count=1 bs=16384 conv=sync
fi

if [ $4 ] #si $4 existe
then
	if [ `echo $4 | cut -f2 -d '.'` == "c" ]
	then
		name4=$(basename $4 .c)
		gcc -m32 -fno-stack-protector -Iuser_includes -c $4 -o user_tmp/$name4.o
	else
		if [ `echo $4 | cut -f2 -d '.'` == "o" ]
		then
			name4=$(basename $4 .o)
		else
			echo "Nom du quatrieme processus invalide. Arret de gkern"
			exit
		fi
	fi
	ld user_tmp/{$name4.o,libc.o} -m elf_i386 -Ttext 0 -Tdata 0x2000 -e main -o user_tmp/$name4.elf
	entry4=$(objdump -d user_tmp/$name4.elf | grep main | cut -f1 -d ' ')
	exists4=11111111
	objcopy -O binary -R .note -R .comment -S user_tmp/$name4.elf user_tmp/$name4.bin
	dd if=user_tmp/$name4.bin of=user_tmp/$name4.extended count=1 bs=16384 conv=sync
fi


echo -e "\n\nFin de la compilation des processus user.\n\t Tout le monde va bien ?"
echo -e "******************************************\n\n\E[0mDebut de l'assemblage final\n"

# Cette table me paraît tellement legit.
echo -e "\x$(echo $entry1 | cut -c7-8)\x$(echo $entry1 | cut -c5-6)\x$(echo $entry1 | cut -c3-4)\x$(echo $entry1 | cut -c1-2)\x$(echo $exists1 | cut -c7-8)\x$(echo $exists1 | cut -c5-6)\x$(echo $exists1 | cut -c3-4)\x$(echo $exists1 | cut -c1-2)\x$(echo $entry2 | cut -c7-8)\x$(echo $entry2 | cut -c5-6)\x$(echo $entry2 | cut -c3-4)\x$(echo $entry2 | cut -c1-2)\x$(echo $exists2 | cut -c7-8)\x$(echo $exists2 | cut -c5-6)\x$(echo $exists2 | cut -c3-4)\x$(echo $exists2 | cut -c1-2)\x$(echo $entry3 | cut -c7-8)\x$(echo $entry3 | cut -c5-6)\x$(echo $entry3 | cut -c3-4)\x$(echo $entry3 | cut -c1-2)\x$(echo $exists3 | cut -c7-8)\x$(echo $exists3 | cut -c5-6)\x$(echo $exists3 | cut -c3-4)\x$(echo $exists3 | cut -c1-2)\x$(echo $entry4 | cut -c7-8)\x$(echo $entry4 | cut -c5-6)\x$(echo $entry4 | cut -c3-4)\x$(echo $entry4 | cut -c1-2)\x$(echo $exists4 | cut -c7-8)\x$(echo $exists4 | cut -c5-6)\x$(echo $exists4 | cut -c3-4)\x$(echo $exists4 | cut -c1-2)" > tmp/table

dd if=tmp/table of=tmp/table.extended count=1 bs=4096 conv=sync

# ajout de la table + processus après le kernel
if [ -z $1 ]
then
	cat tmp/minikernel.extended tmp/table.extended > tmp/minikernel
fi
if [ $1 ] && [ -z $2 ]
then
	cat tmp/minikernel.extended tmp/table.extended user_tmp/$name1.extended > tmp/minikernel
fi
if [ $2 ] && [ -z $3 ]
then
	cat tmp/minikernel.extended tmp/table.extended user_tmp/$name1.extended user_tmp/$name2.extended > tmp/minikernel
fi
if [ $3 ] && [ -z $4 ]
then
	cat tmp/minikernel.extended tmp/table.extended user_tmp/$name1.extended user_tmp/$name2.extended user_tmp/$name3.extended > tmp/minikernel
fi
if [ $4 ]
then
	cat tmp/minikernel.extended tmp/table.extended user_tmp/$name1.extended user_tmp/$name2.extended user_tmp/$name3.extended user_tmp/$name4.extended > tmp/minikernel
fi

# generation de l'image bootable
test -f tmp/build || cc boot/build.c -o tmp/build
tmp/build tmp/bootsect tmp/setup tmp/minikernel > mykernel
dd if=mykernel of=mykernel.vfd count=1 bs=1474560 conv=sync
